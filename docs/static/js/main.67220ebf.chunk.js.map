{"version":3,"sources":["components/RepoSearch/RepoList.jsx","api/github/index.js","api/github/repositories.js","api/github/issues.js","components/RepoSearch/SelectRepo.jsx","components/IssueSearch/IssueList.jsx","components/RepoCard.jsx","components/RepoCollection.jsx","pages/Overview.jsx","App.js","serviceWorker.js","index.js"],"names":["RepoList","_ref","repos","error","selectRepo","react","className","map","repo","onClick","e","preventDefault","select","concat","owner","login","name","ROOT_URI","github","searchRepositories","term","sort","arguments","length","undefined","order","axios","get","params","q","getIssues","repoFullName","SelectRepo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this2","setState","api","then","response","data","total_count","items","_this3","_this$state","onSubmit","target","value","trim","searchRepos","placeholder","React","IssueList","issues","selectIssue","issue","number","title","RepoCard","addMode","allIssues","toggleAdd","bind","assertThisInitialized","addIssue","findIndex","o","id","updatedAllIssues","slice","updatedIssues","splice","i","push","full_name","mode","fetchIssues","_this$props","removeRepo","_this$state2","RepoCollection","RepoCard_RepoCard","key","Overview","r","updatedRepos","toConsumableArray","SelectRepo_SelectRepo","App","Overview_Overview","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67220ebf.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport default function RepoList ({repos, error, selectRepo}) {\r\n    const select = (repo) => {\r\n        return (e) => {\r\n            e.preventDefault();\r\n            selectRepo(repo);\r\n        }\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"repo-list\">\r\n                <p className=\"error\">{error}</p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"repo-list\">\r\n                {repos.map((repo) => (\r\n                    <span onClick={select(repo)}>\r\n                        <label>{`${repo.owner.login}/`}</label>\r\n                        {repo.name}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {searchRepositories} from './repositories';\r\nimport {getIssues} from './issues';\r\n\r\nexport const ROOT_URI = 'https://api.github.com';\r\n\r\nexport default {\r\n    searchRepositories,\r\n    getIssues\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {ROOT_URI} from './';\r\n\r\nexport function searchRepositories(term, sort = '', order = '') {\r\n    return axios.get(`${ROOT_URI}/search/repositories`, {\r\n        params: {\r\n            q: term,\r\n            sort,\r\n            order\r\n        }\r\n    })\r\n}\r\n","import axios from 'axios';\r\nimport {ROOT_URI} from './';\r\n\r\nexport function getIssues(repoFullName) {\r\n    return axios.get(`${ROOT_URI}/repos/${repoFullName}/issues`);\r\n}\r\n","import * as React from 'react';\r\n\r\nimport RepoList from './RepoList';\r\nimport api from '../../api/github';\r\n\r\nexport default class SelectRepo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            repos: [],\r\n            error: '',\r\n            loading: false\r\n        };\r\n    }\r\n\r\n    searchRepos(term) {\r\n        this.setState({loading: true, error: ''})\r\n        api.searchRepositories(term)\r\n            .then(response => {\r\n                if (response.data.total_count === 0) {\r\n                    this.setState({error: 'No repos were found.', loading: false});\r\n                    return;\r\n                }\r\n                this.setState({repos: response.data.items, loading: false});\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {repos, error} = this.state;\r\n        return (\r\n            <form className=\"select-repo\" onSubmit={e => {\r\n                e.preventDefault();\r\n\r\n                if (!e.target.term.value.trim()) {\r\n                    this.setState({error: 'No search term entered.'})\r\n                    return;\r\n                }\r\n\r\n                this.searchRepos(e.target.term.value);\r\n            }}>\r\n                <input name=\"term\" placeholder=\"Search Github Repos\" />\r\n                <RepoList repos={repos} error={error} selectRepo={this.props.selectRepo} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport default function IssueList ({issues, error, selectIssue}) {\r\n    const select = (issue) => {\r\n        return (e) => {\r\n            e.preventDefault();\r\n\r\n            if (selectIssue) {\r\n                selectIssue(issue);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"issue-list\">\r\n                <p className=\"error\">{error}</p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"issue-list\">\r\n                {issues.map((issue) => (\r\n                    <span onClick={select(issue)}>\r\n                        <span className=\"issue-number\">{issue.number}</span> {issue.title}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport IssueList from './IssueSearch/IssueList';\r\nimport api from '../api/github';\r\n\r\nexport default class RepoCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            addMode: false,\r\n            issues: [],\r\n            allIssues: [],\r\n            error: ''\r\n        }\r\n\r\n        this.toggleAdd = this.toggleAdd.bind(this);\r\n        this.addIssue = this.addIssue.bind(this);\r\n    }\r\n\r\n    addIssue(issue) {\r\n        const {allIssues, issues} = this.state;\r\n\r\n        const i = allIssues.findIndex(o => o.id === issue.id);\r\n\r\n        if (i >= 0) {\r\n            const updatedAllIssues = allIssues.slice();\r\n            const updatedIssues = issues.slice();\r\n            updatedAllIssues.splice(i, 1);\r\n\r\n            const i = updatedIssues.findIndex(o => o.id === issue.id);\r\n\r\n            if (i < 0) {\r\n                updatedIssues.push(issue);\r\n            }\r\n\r\n            this.setState({allIssues: updatedAllIssues, issues: updatedIssues});\r\n        }\r\n    }\r\n\r\n    fetchIssues() {\r\n        const {repo} = this.props;\r\n\r\n        this.setState({allIssues: []}, () => {\r\n            api.getIssues(repo.full_name).then((response) => {\r\n                this.setState({allIssues: response.data});\r\n            })\r\n        });\r\n    }\r\n\r\n    toggleAdd(mode) {\r\n        if (mode) {\r\n            this.fetchIssues();\r\n        }\r\n        this.setState({addMode: mode});\r\n    }\r\n\r\n    render() {\r\n        const {repo, removeRepo} = this.props;\r\n        const {addMode, allIssues, issues} = this.state;\r\n        return (\r\n            <div className=\"repo-card\">\r\n                <span className=\"close\" onClick={() => removeRepo(repo)}>X</span>\r\n                <div className=\"repo-title\">\r\n                    <p className=\"repo-owner\">{repo.owner.login}</p>\r\n                    <h1 className=\"repo-name\">{repo.name}</h1>\r\n                </div>\r\n                {addMode ? (\r\n                    <div>\r\n                        <span className=\"stop-adding\" onClick={() => this.toggleAdd(false)}>Stop Adding</span>\r\n                        <IssueList issues={allIssues} selectIssue={this.addIssue} />\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <span className=\"add-issue\" onClick={() => this.toggleAdd(true)}>Add Issue</span>\r\n                        <IssueList issues={issues} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport RepoCard from './RepoCard';\r\n\r\nexport default function RepoCollection({repos, removeRepo}) {\r\n    return (\r\n        <div className=\"repo-collection\">\r\n            {repos.map((repo) => <RepoCard repo={repo} removeRepo={removeRepo} key={repo.full_name} />)}\r\n            {/* To fix flexbox alignment shenanigans */}\r\n            <div className=\"repo-card-empty\" />\r\n            <div className=\"repo-card-empty\" />\r\n            <div className=\"repo-card-empty\" />\r\n            <div className=\"repo-card-empty\" />\r\n            <div className=\"repo-card-empty\" />\r\n            <div className=\"repo-card-empty\" />\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\n\r\nimport SelectRepo from '../components/RepoSearch/SelectRepo';\r\nimport RepoCollection from '../components/RepoCollection';\r\nimport '../styles/pages/overview.scss';\r\n\r\nexport default class Overview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            repos: []\r\n        }\r\n\r\n        this.removeRepo = this.removeRepo.bind(this);\r\n        this.selectRepo = this.selectRepo.bind(this);\r\n    }\r\n\r\n    removeRepo(repo) {\r\n        const {repos} = this.state;\r\n\r\n        const i = repos.findIndex((r) => r.id === repo.id);\r\n\r\n        if (i >= 0) {\r\n            const updatedRepos = repos.slice();\r\n            updatedRepos.splice(i, 1);\r\n\r\n            this.setState({repos: updatedRepos});\r\n        }\r\n    }\r\n\r\n    selectRepo(repo) {\r\n        const {repos} = this.state;\r\n\r\n        const i = repos.findIndex((r) => r.id === repo.id);\r\n\r\n        if (i < 0) {\r\n            repo.issues = [];\r\n            const updatedRepos = [...repos.slice(), repo];\r\n\r\n            this.setState({repos: updatedRepos});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {repos} = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"left-pane\">\r\n                    <SelectRepo selectRepo={this.selectRepo} />\r\n                </div>\r\n                <div className=\"main-list\">\r\n                    <RepoCollection removeRepo={this.removeRepo} repos={repos} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Overview from './pages/Overview';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Overview />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}